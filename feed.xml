<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Just Coding Things</title>
		<description>Life, Programming and Stuff</description>
		<link>http://wanderwaltz.github.io</link>
		<atom:link href="http://wanderwaltz.github.io/feed.xml" rel="self" type="application/rss+xml" />
		
			
			<item>
				<title>Web Design with a Coding Mentality</title>
				
					<description>&lt;p&gt;Recently I’ve come to a realization that I like coding better than writing. Consider this blog for
example. I’ve been tinkering with it for a couple of days now: changing the theme, moving CSS styles
around, optimizing usage of templates etc. - all that instead of actually writing some content,
which someone could actually read.&lt;/p&gt;

&lt;p&gt;It is a funny thought - as a programmer, I value the internal structure, the beauty of the source
files more than the actual product, which will be used by the consumer.&lt;/p&gt;

&lt;p&gt;Maybe this comes from the fact that I’m not really a good writer, but there is one more thing that
makes me do all this: I see this blog as a piece of software, with all the usual concerns such as
maintainability, extendibility etc.&lt;/p&gt;

&lt;p&gt;They say that if all you have is a hammer, everything looks like a nail. Programming is my hammer
and I’d like to share an example of a practical problem, which ended up not being a nail after all.&lt;/p&gt;

</description>
				
				<pubDate>Sun, 27 Mar 2016 20:39:00 +0600</pubDate>
				<link>http://wanderwaltz.github.io/2016/03/27/web-design-with-a-coding-mentality/</link>
				<guid isPermaLink="true">http://wanderwaltz.github.io/2016/03/27/web-design-with-a-coding-mentality/</guid>
			</item>
			
		
			
			<item>
				<title>Safe NSArray literals</title>
				
					<description>&lt;p&gt;While Swift is a new panacea an a go-to solution for all things programming, we still have to
maintain our years’-old Objective-C codebases. And that comes with a bag of old problems, which
every Objective-C programmer has encountered once in their life.&lt;/p&gt;

&lt;p&gt;Consider an &lt;code&gt;NSArray&lt;/code&gt;. Capable of containing any object type, it does not handle &lt;code&gt;nil&lt;/code&gt;
all that well. Constructing an &lt;code&gt;NSArray&lt;/code&gt; of objects using an array literal like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;bp&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;@[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object3&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;is concise and convenient, but it comes with a cost. If any of the object references is actually
&lt;code&gt;nil&lt;/code&gt;, we’ll have a crash in our hands. We don’t really want this to happen, right?&lt;/p&gt;

</description>
				
				<pubDate>Fri, 18 Mar 2016 22:20:00 +0600</pubDate>
				<link>http://wanderwaltz.github.io/2016/03/18/safe-array-literals/</link>
				<guid isPermaLink="true">http://wanderwaltz.github.io/2016/03/18/safe-array-literals/</guid>
			</item>
			
		
			
			<item>
				<title>Binding Swift funcs</title>
				
					<description>&lt;p&gt;I’ve already talked about my &lt;a href=&quot;/2015/04/11/swift-wrappers-for-c-libraries/&quot;&gt;quest&lt;/a&gt; to learn me some Swift. Having implemented basic Swift wrappers for Squirrel tables and arrays, the time has come to move on to the fun stuff: binding functions.&lt;/p&gt;

&lt;p&gt;Squirrel allows binding native functions having the &lt;code&gt;SQFUNCTION&lt;/code&gt; signature which is as following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SQInteger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQFUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HSQUIRRELVM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Working with C function pointers in Swift? Oh boy, this gonna be good!&lt;/p&gt;

</description>
				
				<pubDate>Thu, 23 Apr 2015 05:12:00 +0600</pubDate>
				<link>http://wanderwaltz.github.io/2015/04/23/binding-swift-funcs/</link>
				<guid isPermaLink="true">http://wanderwaltz.github.io/2015/04/23/binding-swift-funcs/</guid>
			</item>
			
		
			
			<item>
				<title>Writing Swift wrappers for C libraries</title>
				
					<description>&lt;p&gt;I’ve been kind of bashing Swift recently because of the current buggy state of the tools (SourceKit service and Swift compiler crashes are the most notable offenders). But I have to admit that as a language Swift has become much more usable then it was the last time I’ve touched it. I still encounter weird seemingly unrelated compilation error messages but (thanks to Stack Overflow and all the people who already encountered something similar) I usually can decipher the errors and either fix them or mourn for things that cannot be fixed.&lt;/p&gt;

&lt;p&gt;Swift interaction with C code was actually a pleasant surprise for me. I’ve decided to practice Swift a bit by creating a wrapper/bindings library for &lt;a href=&quot;http://squirrel-lang.org/&quot;&gt;Squirrel&lt;/a&gt; language. Squirrel is written in C++, but has C API so it should be simple to import it and use in Swift code. I’ve never actually thought it would be that easy.&lt;/p&gt;

</description>
				
				<pubDate>Sat, 11 Apr 2015 08:30:00 +0600</pubDate>
				<link>http://wanderwaltz.github.io/2015/04/11/swift-wrappers-for-c-libraries/</link>
				<guid isPermaLink="true">http://wanderwaltz.github.io/2015/04/11/swift-wrappers-for-c-libraries/</guid>
			</item>
			
		
			
			<item>
				<title>Spellchecking blog posts</title>
				
					<description>&lt;p&gt;English is not my native language. You’ve probably noticed that already. To make the posts in this blog a bit less cringe worthy, I check the spelling and grammar of the text I write using Microsoft Word. The problem is that Word is not really tailored to work with programming-related texts and code samples.&lt;/p&gt;

</description>
				
				<pubDate>Sat, 11 Apr 2015 02:47:00 +0600</pubDate>
				<link>http://wanderwaltz.github.io/2015/04/11/spellchecking-blog-posts/</link>
				<guid isPermaLink="true">http://wanderwaltz.github.io/2015/04/11/spellchecking-blog-posts/</guid>
			</item>
			
		
			
		
			
			<item>
				<title>Artificial Inheritance</title>
				
					<description>&lt;p&gt;&lt;a href=&quot;http://blogs.perl.org/users/sid_burn/2014/03/inheritance-is-bad-code-reuse-part-1.html&quot;&gt;They&lt;/a&gt; &lt;a href=&quot;http://blog.berniesumption.com/software/inheritance-is-evil-and-must-be-destroyed/&quot;&gt;say&lt;/a&gt; &lt;a href=&quot;http://simpleprogrammer.com/2010/01/15/inheritance-is-inherently-evil/&quot;&gt;inheritance&lt;/a&gt; &lt;a href=&quot;http://stackoverflow.com/questions/11056943/deep-class-inheritance-hierarchy-bad-idea&quot;&gt;is&lt;/a&gt; &lt;a href=&quot;http://codingdelight.com/2014/01/16/favor-composition-over-inheritance-part-1/&quot;&gt;bad&lt;/a&gt;. Yes, there really are 5 different links in the previous sentence.&lt;/p&gt;

&lt;p&gt;The links I’ve provided may not be the most trustworthy sources on the subject (as the matter of fact, I’ve entered ‘inheritance is bad’ in the Google prompt and used the top results just to provide a couple of examples). Jokes aside, there is a lot of info out there about the reasons to prefer composition over inheritance in most cases.&lt;/p&gt;

&lt;p&gt;As with all of such statements you don’t blindly follow the rule. Inheritance is a tool, and as a software engineer you should know when and where to use your tools.&lt;/p&gt;

&lt;p&gt;I’m using composition for building complex objects a lot these days. One of the patterns I’ve been using lately is adding Objective-C protocol conformance to specific objects (i.e. not classes, but individual instances) with the help of wrapper (or decorator) objects. To simplify the interaction with these wrappers I’m using the message forwarding mechanism, which allows me treating the wrapper object in the same way as the original object, but with the benefits of the added protocol.&lt;/p&gt;

&lt;p&gt;Now starting with that in mind I’ve come up with an interesting little runtime construct, which utilizes composition and message forwarding to implement multiple inheritance-like behavior on instance level.&lt;/p&gt;

</description>
				
				<pubDate>Sun, 05 Apr 2015 00:00:00 +0600</pubDate>
				<link>http://wanderwaltz.github.io/2015/04/05/artificial-inheritance/</link>
				<guid isPermaLink="true">http://wanderwaltz.github.io/2015/04/05/artificial-inheritance/</guid>
			</item>
			
		
			
			<item>
				<title>Once upon an App</title>
				
					<description>&lt;p&gt;I was making this one app for a long time already. An app for a single user. Not really a promising venture, one might say. But this is personal. It’s an app for my father which helps him do his job and which he asked me to make for him when I was still going to school.&lt;/p&gt;

&lt;p&gt;The app is actually pretty simple. It’s an implementation of a customized &lt;a href=&quot;https://en.wikipedia.org/wiki/Minnesota_Multiphasic_Personality_Inventory&quot;&gt;Minnesota Multiphasic Personality Inventory&lt;/a&gt;) test (MMPI for shortness) which involves the user answering 500+ yes/no questions and a lot of tedious but otherwise simple math to calculate the results.&lt;/p&gt;

&lt;p&gt;Before the app, father was calculating these results manually, which required comparing the answers list with a bunch of template tables, calculate means, standard deviations and all that statistical stuff, which is rather simple in formulae, but is tedious to compute by hand. I was aiming to be a programmer from my early days and it’s no surprise that my father asked me to make this app for him.&lt;/p&gt;

&lt;p&gt;Well, I’ve made it. Two times from scratch already. And I think I’m going for the third.&lt;/p&gt;

</description>
				
				<pubDate>Thu, 02 Apr 2015 00:00:00 +0600</pubDate>
				<link>http://wanderwaltz.github.io/2015/04/02/once-upon-an-app/</link>
				<guid isPermaLink="true">http://wanderwaltz.github.io/2015/04/02/once-upon-an-app/</guid>
			</item>
			
		
			
			<item>
				<title>That awkward moment when `git rebase --continue`</title>
				
					<description>&lt;p&gt;…suddenly opens vi to update a commit message and you don’t really know how to save the file and exit the goddamn editor.&lt;/p&gt;

&lt;p&gt;No, really, I should probably learn me some vi because it is kind of ridiculous to go to &lt;a href=&quot;http://stackoverflow.com/questions/11828270/how-to-exit-the-vim-editor&quot;&gt;Stack Overflow&lt;/a&gt; each time that happens in search for the magical keystroke. Another question is why my GUI git &lt;a href=&quot;https://www.atlassian.com/software/sourcetree/overview&quot;&gt;client of choice&lt;/a&gt; does not handle this situation and does not allow entering the commit message in the user interface anyway.&lt;/p&gt;

</description>
				
				<pubDate>Wed, 01 Apr 2015 00:00:00 +0600</pubDate>
				<link>http://wanderwaltz.github.io/2015/04/01/that-awkward-moment/</link>
				<guid isPermaLink="true">http://wanderwaltz.github.io/2015/04/01/that-awkward-moment/</guid>
			</item>
			
		
			
			<item>
				<title>Beyond Objective-C</title>
				
					<description>&lt;p&gt;They say Objective-C is dead. A new king named Swift is rising and Objective-C days are counted. Well that’s probably true. It may be not completely true right now, but one day it will be. I surely need to familiarize myself with Swift a little bit more so I will know what I’m doing already when there would be no choice to write in it.&lt;/p&gt;

&lt;p&gt;What’s bothering me still is that Swift is Apple-specific in the same way that Objective-C has always been. Learning Swift more, getting used to it will bind you tighter to the Apple platform (it does not matter, Mac OS or iOS). You still will have almost no experience on any other platforms or technologies.&lt;/p&gt;

</description>
				
				<pubDate>Sun, 29 Mar 2015 00:00:00 +0600</pubDate>
				<link>http://wanderwaltz.github.io/2015/03/29/beyond-objective-c/</link>
				<guid isPermaLink="true">http://wanderwaltz.github.io/2015/03/29/beyond-objective-c/</guid>
			</item>
			
		
			
			<item>
				<title>Subclassing NSArray</title>
				
					<description>&lt;p&gt;Creating custom collections is rarely necessary nowadays. Most of the time you can safely go with the collection classes provided by the standard library you’re working with and not bother with the implementation details. What would be the reason to write a custom collection anyway?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Performance?&lt;/strong&gt; I’d say that you go with the standard collections and rewrite them if and only if you’re completely sure that it’s the collection that is your bottleneck and not anything else. Give me a profiler-proven reason to do that.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Changing the collection interface?&lt;/strong&gt; Well that could be done via categories or composition. You don’t really need to subclass &lt;code&gt;NSArray&lt;/code&gt; or &lt;code&gt;NSDictionary&lt;/code&gt; to change their interface if you want to.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I cannot come up with another reasons to subclass Foundation collections right now, but to be honest, here at &lt;a href=&quot;http://wanderwaltz.github.io&quot;&gt;#justcodingthings&lt;/a&gt; we don’t actually need a reason to do something. We do it because we can and that’s the only reason we need.&lt;/p&gt;

</description>
				
				<pubDate>Sat, 28 Mar 2015 00:00:00 +0600</pubDate>
				<link>http://wanderwaltz.github.io/2015/03/28/subclassing-nsarray/</link>
				<guid isPermaLink="true">http://wanderwaltz.github.io/2015/03/28/subclassing-nsarray/</guid>
			</item>
			
		
			
			<item>
				<title>Putting more &quot;C&quot; in your Objective-C</title>
				
					<description>&lt;p&gt;I like Objective-C. I’ve been writing Objective-C code for almost 6 years now and I can surely say
that I’m comfortable with the language and that it provides everything I need to make awesome apps.
But nothing is perfect of course.&lt;/p&gt;

&lt;p&gt;The dynamic nature of the language can be a woe at some times. One of such things is lack of proper
private methods in Objective-C.&lt;/p&gt;

</description>
				
				<pubDate>Thu, 26 Mar 2015 00:00:00 +0600</pubDate>
				<link>http://wanderwaltz.github.io/2015/03/26/putting-more-c-in-your-objective-c/</link>
				<guid isPermaLink="true">http://wanderwaltz.github.io/2015/03/26/putting-more-c-in-your-objective-c/</guid>
			</item>
			
		
	</channel>
</rss>
